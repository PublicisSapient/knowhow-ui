name: UI_CD_Workflow  # Define the name of the workflow

# Define when the workflow should trigger
on:
  push:
    branches:
      - qa-testing
  workflow_dispatch:

# Define environment variables
env:
  IMAGE_NAME: ${{ secrets.KNH_UI_IMAGE_NAME }}
  ACR_NAME: ${{ secrets.SPEEDTOOLS_ACR_NAME }}  # without .azurecr.io
  ACR_LOGIN_SERVER: ${{ secrets.SPEEDTOOLS_ACR_LOGIN_SERVER }}  # e.g. myacr.azurecr.io
  BITBUCKET_HELM_REPO: ${{ secrets.SPEEDTOOLS_BITBUCKET_HELM_REPO }} # HTTPS clone URL (without creds)
  HELM_CHART_PATH: ${{ secrets.KNH_UI_HELM_CHART_PATH }}         # charts/myapp or similar
  ARGOCD_APP_NAME: ${{ secrets.KNH_UI_ARGOCD_APP_NAME }}
  ARGOCD_SERVER: ${{ secrets.SPEEDTOOLS_ARGOCD_SERVER }}

jobs:
  # âœ… UI Build & Testing
  build_deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout GitHub repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # # 2. Azure login
      # - name: Azure CLI Login
      #   uses: azure/login@v1
      #   with:
      #     creds: ${{ secrets.SPEEDTOOLS_AZURE_CREDENTIALS }}

      # # 3. Login to Azure Container Registry
      # - name: ACR Login
      #   run: az acr login --name $ACR_NAME

      - name: Set Up Node.js  # Set up Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies & Build UI
        run: |
          npm cache clean --force
          npm install
          npm install -g @angular/cli@17.3.12
          npm run build:dev
          mkdir -p build
          cp -r dist/dashboard/* build/
          chmod -R 775 build
          cd build
          tar -czvf ui2.tar *
          mv ui2.tar ../nginx/files
          rm -rf build

      # Docker build & push to ACR
      - name: Build & Push Docker Image
        run: |
          IMAGE_TAG=${GITHUB_SHA::8}
          docker login $ACR_LOGIN_SERVER --username ${{ secrets.SPEEDTOOLS_ACR_USERNAME }} --password ${{ secrets.SPEEDTOOLS_ACR_PASSWORD }}
          docker build -t $ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG .
          docker push $ACR_LOGIN_SERVER/$IMAGE_NAME:qa-$IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
      
      - name: Checkout Helm charts from Bitbucket
        run: |
          git clone ${{ secrets.SPEEDTOOLS_BITBUCKET_HELM_REPO }}
          cd build-configurations/KnowHOW-Deploy/knowhow-ui
          # Update values.yaml image tag
          yq -i ".image.tag = \"qa-${IMAGE_TAG}\"" values-qa.yaml
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add values-qa.yaml
          git commit -m "Update knowhow-ui image tag to ${{ github.sha }}"
          git push origin HEAD

      # 6. Install ArgoCD CLI
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/

      # 7. Login to Argo CD
      - name: Argo CD Login
        run: |
          argocd login $ARGOCD_SERVER \
            --username ${{ secrets.SPEEDTOOLS_ARGOCD_USERNAME }} \
            --password ${{ secrets.SPEEDTOOLS_ARGOCD_PASSWORD }} \
            --insecure

      # 8. Update image in Argo CD App and sync
      - name: Deploy with Argo CD
        run: |
          argocd app sync $ARGOCD_APP_NAME --prune --timeout 300